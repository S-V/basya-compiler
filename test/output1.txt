	.486
	.model	flat

includelib MSVCRTD
includelib OLDNAMES

public	_main
extrn	__imp__printf : PROC
extrn	__imp__getchar : PROC
extrn	__ftol2_sse : PROC

CONST segment
L0	dd 040490fdbh	; 3.141593
L2	dd 040490fdbh	; 3.141593
L11	db 'Starting the program...', 0h	; "Starting the program..."
L14	db 'a = %d\n', 0h	; "a = %d\n"
L16	db 'Hee, hoo!\n', 0h	; "Hee, hoo!\n"
L18	dd 04286ae14h	; 67.339996
L19	dd 0cdcdcd00h	; -431595520.000000
L20	dd 0cdcdcd00h	; -431595520.000000
L21	dd 0cdcdcd00h	; -431595520.000000
L22	dd 0cdcdcd00h	; -431595520.000000
L23	db 'Hello, world!%c, %d%c', 0h	; "Hello, world!%c, %d%c"
L24	db 'bell!!!%c', 0h	; "bell!!!%c"
L28	db 'x = %d', 0h	; "x = %d"
CONST ends

_TEXT segment

_circumf	proc
push	ebp
mov	ebp, esp
sub	esp, 4
push	ebx
push	esi
push	edi
                                   
; return cast< int >( (cast< float >( 2 * r )) * 3.14159265358 );
mov	eax, dword ptr [r]
shl	eax, 1
push	eax
fild	dword ptr [esp]
add	esp, 4
fmul	dword ptr L0
call	__ftol2_sse
L1:
pop	edi
pop	esi
pop	ebx
mov	esp, ebp
pop	ebp
ret	0
_circumf	endp

_area	proc
push	ebp
mov	ebp, esp
sub	esp, 4
push	ebx
push	esi
push	edi
                                                
; return cast< int >( (cast< float >( r * r )) * 3.14159265358 );
mov	eax, dword ptr [r]
imul	eax, dword ptr [r]
push	eax
fild	dword ptr [esp]
add	esp, 4
fmul	dword ptr L2
call	__ftol2_sse
L3:
pop	edi
pop	esi
pop	ebx
mov	esp, ebp
pop	ebp
ret	0
_area	endp

_Mul	proc
push	ebp
mov	ebp, esp
sub	esp, 8
push	ebx
push	esi
push	edi
                      
; return cast< int >( a * b );
fld	dword ptr [a]
fmul	dword ptr [b]
call	__ftol2_sse
L4:
pop	edi
pop	esi
pop	ebx
mov	esp, ebp
pop	ebp
ret	0
_Mul	endp

_Div	proc
push	ebp
mov	ebp, esp
sub	esp, 12
push	ebx
push	esi
push	edi
           
; return a / b;
mov	eax, dword ptr [a]
cdq
idiv	dword ptr [b]
L5:
pop	edi
pop	esi
pop	ebx
mov	esp, ebp
pop	ebp
ret	0
_Div	endp

_conditiontest	proc
push	ebp
mov	ebp, esp
sub	esp, 12
push	ebx
push	esi
push	edi

; if test1 > test2
            mov	eax, dword ptr [test1]
cmp	eax, dword ptr [test2]
jle	L6

            
; result = test1;
mov	eax, dword ptr [test1]
mov	dword ptr [result], eax
 jmp	L7
L6:

; if test1 < test2
            mov	eax, dword ptr [test1]
cmp	eax, dword ptr [test2]
jge	L8

            
; result = test2;
mov	eax, dword ptr [test2]
mov	dword ptr [result], eax
 jmp	L9
L8:
        
; result = 0;
mov	dword ptr [result], 0
L9:
L7:
   
; return result;
mov	eax, dword ptr [result]
L10:
pop	edi
pop	esi
pop	ebx
mov	esp, ebp
pop	ebp
ret	0
_conditiontest	endp

_main	proc
push	ebp
mov	ebp, esp
sub	esp, 105
push	ebx
push	esi
push	edi
        
; a = 87;
mov	dword ptr [a], 87
        
; b = 343;
mov	dword ptr [b], 343
        
; c = 33;
mov	dword ptr [c], 33
 
; "Starting the program..."
push	offset L11
      
; printf("Starting the program...");
call	dword ptr __imp__printf
add	esp, 4
L12:

; while a > 0
            cmp	dword ptr [a], 0
jle	L13

   
; a
push	dword ptr [a]
 
; "a = %d\n"
push	offset L14
      
; printf("a = %d\n", a);
call	dword ptr __imp__printf
add	esp, 8
                                
; a = a - 6;
mov	eax, dword ptr [a]
sub	eax, 6
mov	dword ptr [a], eax

; if a % 37 > 8
                                mov	eax, dword ptr [a]
mov	ecx, 37
cdq
idiv	ecx
cmp	edx, 8
jle	L15

 
; "Hee, hoo!\n"
push	offset L16
      
; printf("Hee, hoo!\n");
call	dword ptr __imp__printf
add	esp, 4
           
; return a - b;
mov	eax, dword ptr [a]
sub	eax, dword ptr [b]
 jmp	L17
L15:
 jmp	L12
L13:
               
; f2 = 67.34
fld	dword ptr L18
fstp	dword ptr [f2]
               
; (f2 = 67.34, f4 = 4343.)
fld	dword ptr L19
fstp	dword ptr [f4]
                                                            
; f1 = ((f2 = 67.34, f4 = 4343.), f2 + (34. / f4) * f2);
fld	dword ptr L20
fdiv	dword ptr [f4]
fmul	dword ptr [f2]
fadd	dword ptr [f2]
fstp	dword ptr [f1]
                           
; f1 = f2 + f3;
fld	dword ptr [f2]
fadd	dword ptr [f3]
fstp	dword ptr [f1]
                      
; f1 = (cast< float >( i )) * f3;
fild	dword ptr [i]
fmul	dword ptr [f3]
fstp	dword ptr [f1]
                                         
; i = cast< int >( f1 / f3 );
fld	dword ptr [f1]
fdiv	dword ptr [f3]
call	__ftol2_sse
mov	dword ptr [i], eax
                                                                                                       
; c1 = cast< char >( (f1 + (cast< float >( i ))) + (cast< float >( ua / uc )) );
mov	eax, dword ptr [ua]
xor	edx, edx
div	dword ptr [uc]
push	eax
fild	dword ptr [esp]
add	esp, 4
fld	dword ptr [f1]
fild	dword ptr [i]
faddp	st(1), st
faddp	st(1), st
call	__ftol2_sse
mov	byte ptr [c1], al
                                                    
; f1 = cast< float >( (cast< char >( c1 )) * (cast< char >( c3 )) );
movsx	eax, byte ptr [c1]
movsx	ecx, byte ptr [c3]
imul	eax, ecx
push	eax
fild	dword ptr [esp]
add	esp, 4
fstp	dword ptr [f1]
                                                                                                                           
; i = cast< int >( (f1 - f3) * 67. + (cast< float >( c2 )) / f1 );
movsx	eax, byte ptr [c2]
push	eax
fild	dword ptr [esp]
add	esp, 4
fdiv	dword ptr [f1]
fld	dword ptr [f1]
fsub	dword ptr [f3]
fmul	dword ptr L21
faddp	st(1), st
call	__ftol2_sse
mov	dword ptr [i], eax
          
; c3
movsx	eax, byte ptr [c3]
push	eax
                                                    
; i = cast< int >( f4 * 7. )
fld	dword ptr [f4]
fmul	dword ptr L22
call	__ftol2_sse
mov	dword ptr [i], eax
push	eax
      
; 'a'
push	97
 
; "Hello, world!%c, %d%c"
push	offset L23
      
; printf("Hello, world!%c, %d%c", 'a', i = cast< int >( f4 * 7. ), c3);
call	dword ptr __imp__printf
add	esp, 16
          
; bellChar
movsx	eax, byte ptr [bellChar]
push	eax
 
; "bell!!!%c"
push	offset L24
      
; printf("bell!!!%c", bellChar);
call	dword ptr __imp__printf
add	esp, 8

; do
L25:
   
; x
push	dword ptr [x]
 
; "x = %d"
push	offset L28
      
; printf("x = %d", x);
call	dword ptr __imp__printf
add	esp, 8
L26:
                                                                                             mov	eax, dword ptr [a]
imul	eax, dword ptr [b]
sub	eax, dword ptr [c]
mov	ecx, dword ptr [b]
shl	eax, cl
xor	ecx, ecx
cmp	dword ptr [x], 33
setle	cl
and	eax, ecx
test	eax, eax
je	L25

L27:
                                                                                                             
; i = (a / c) % (!(b % 3));
mov	eax, dword ptr [b]
mov	ecx, 3
cdq
idiv	ecx
xor	eax, eax
cmp	edx, 0
sete	al
mov	ecx, eax
mov	eax, dword ptr [a]
cdq
idiv	dword ptr [c]
cdq
idiv	ecx
mov	dword ptr [i], edx
      
; getchar();
call	dword ptr __imp__getchar
                 
; i = i + 1
mov	eax, dword ptr [i]
inc	eax
mov	dword ptr [i], eax
            
; a = (i = i + 1, b);
mov	eax, dword ptr [b]
mov	dword ptr [a], eax

; if a + b
                  mov	eax, dword ptr [a]
add	eax, dword ptr [b]
test	eax, eax
jne	L29

                 
; i = i + 1;
mov	eax, dword ptr [i]
inc	eax
mov	dword ptr [i], eax
      
; return -( 1 );
mov	eax, 1
neg	eax
 jmp	L17
L29:

; if !(a + b)
                           mov	eax, dword ptr [a]
add	eax, dword ptr [b]
cmp	eax, 0
jne	L31

                          
; a = b % i;
mov	eax, dword ptr [b]
cdq
idiv	dword ptr [i]
mov	dword ptr [a], edx
 jmp	L32
L31:

; if ~(a)
           mov	eax, dword ptr [a]
not	eax
test	eax, eax
jne	L33

                          
; i = a << b;
mov	eax, dword ptr [a]
mov	ecx, dword ptr [b]
shl	eax, cl
mov	dword ptr [i], eax
L33:
L32:
L30:

; if a > b
            mov	eax, dword ptr [a]
cmp	eax, dword ptr [b]
jle	L34

                 
; a = a - 1;
mov	eax, dword ptr [a]
dec	eax
mov	dword ptr [a], eax
           
; return a - b;
mov	eax, dword ptr [a]
sub	eax, dword ptr [b]
 jmp	L17
L34:
   
; b
push	dword ptr [b]
      
; 9
push	9
                              
; c & 7
mov	eax, dword ptr [c]
and	eax, 7
push	eax
                        
; i + b
mov	eax, dword ptr [i]
add	eax, dword ptr [b]
push	eax
                                
; i = (printf(i + b, c & 7, 9, b)) % (getchar());
call	dword ptr __imp__printf
add	esp, 16
mov	ecx, eax
call	dword ptr __imp__getchar
mov	esi, eax
mov	eax, ecx
cdq
idiv	esi
mov	dword ptr [i], edx

; i = cast< int >( c2 = cast< char >( uc % a + 13 * f & 1 + (~(a & b | c)) <= (b + 13 * 8 << 21) >>> (((298 % c) % 1) / ua) / ub ) );
mov	eax, 298
cdq
idiv	dword ptr [c]
mov	eax, edx
mov	ecx, 1
cdq
idiv	ecx
mov	eax, edx
xor	edx, edx
div	dword ptr [ua]
xor	edx, edx
div	dword ptr [ub]
mov	ecx, eax
mov	eax, dword ptr [b]
mov	esi, 13
lea	edi, [esi*8 + eax]
shl	edi, 21
shr	edi, cl
mov	eax, dword ptr [a]
and	eax, dword ptr [b]
or	eax, dword ptr [c]
not	eax
inc	eax
xor	ecx, ecx
cmp	eax, edi
setle	cl
mov	eax, dword ptr [uc]
cdq
idiv	dword ptr [a]
imul	eax, dword ptr [f], 13
add	edx, eax
and	ecx, edx
mov	byte ptr [c2], cl
mov	dword ptr [i], ecx
            
; a = b
mov	eax, dword ptr [b]
mov	dword ptr [a], eax
                 
; (a = b, i = i + 1)
mov	eax, dword ptr [i]
inc	eax
mov	dword ptr [i], eax
                 
; ((a = b, i = i + 1), a = 8 * b)
mov	eax, dword ptr [b]
shl	eax, 3
mov	dword ptr [a], eax
            
; c = a
mov	eax, dword ptr [a]
mov	dword ptr [c], eax
        
; (c = a, i = 43)
mov	dword ptr [i], 43
                                      
; ((c = a, i = 43), a = (~(b)) | 1)
mov	eax, dword ptr [b]
not	eax
or	eax, 1
mov	dword ptr [a], eax
                                                                                                                                                                
; i = ((((a = b, i = i + 1), a = 8 * b), m | b + 3 & 32)) % ((((c = a, i = 43), a = (~(b)) | 1), b << c >= 8));
mov	eax, dword ptr [b]
add	eax, 3
and	eax, 32
or	eax, dword ptr [m]
mov	ecx, dword ptr [b]
mov	esi, ecx
mov	ecx, dword ptr [c]
shl	esi, cl
xor	ecx, ecx
cmp	esi, 8
setge	cl
cdq
idiv	ecx
mov	dword ptr [i], edx

; i = (((54432 % ((((a / b) * 34) * c) / 1 + 32 % (2 * a)) + (3258 / (483 % ((a * b) * 7))) * 24) + (87323 / (a + 43 % c)) % 54) - (((43 * a) * b) * c) / 17) * ((a + b / 4) + (((c * 343) % q) * 232324) / ((434 + (((a * b) % 8) / 1) * c) - 23));
mov	eax, dword ptr [a]
cdq
idiv	dword ptr [b]
imul	ecx, eax, 34
imul	ecx, dword ptr [c]
mov	eax, ecx
mov	ecx, 1
cdq
idiv	ecx
mov	ecx, dword ptr [a]
shl	ecx, 1
mov	esi, eax
mov	eax, 32
cdq
idiv	ecx
add	esi, edx
mov	eax, 54432
cdq
idiv	esi
mov	eax, dword ptr [a]
imul	eax, dword ptr [b]
imul	ecx, eax, 7
mov	eax, 483
mov	esi, edx
cdq
idiv	ecx
mov	eax, 3258
mov	ecx, edx
cdq
idiv	ecx
imul	ecx, eax, 24
add	esi, ecx
mov	eax, 43
cdq
idiv	dword ptr [c]
add	edx, dword ptr [a]
mov	eax, 87323
mov	ecx, edx
cdq
idiv	ecx
mov	ecx, 54
cdq
idiv	ecx
add	esi, edx
imul	eax, dword ptr [a], 43
imul	eax, dword ptr [b]
imul	eax, dword ptr [c]
mov	ecx, 17
cdq
idiv	ecx
sub	esi, eax
mov	eax, dword ptr [a]
imul	eax, dword ptr [b]
mov	ecx, 8
cdq
idiv	ecx
mov	eax, edx
mov	ecx, 1
cdq
idiv	ecx
imul	eax, dword ptr [c]
add	eax, 434
sub	eax, 23
mov	ecx, eax
imul	eax, dword ptr [c], 343
cdq
idiv	dword ptr [q]
imul	eax, edx, 232324
cdq
idiv	ecx
mov	ecx, dword ptr [b]
shr	ecx, 2
add	ecx, dword ptr [a]
add	eax, ecx
imul	esi, eax
mov	dword ptr [i], esi
                                                                                                                                                                                                
; i = (i / (((b - 1) + b * 8) + c * d)) / (e + f);
mov	eax, dword ptr [b]
mov	ecx, dword ptr [b]
lea	esi, [ecx + eax*8 - 1]
mov	eax, dword ptr [c]
imul	eax, dword ptr [d]
add	esi, eax
mov	eax, dword ptr [i]
cdq
idiv	esi
mov	ecx, dword ptr [e]
add	ecx, dword ptr [f]
cdq
idiv	ecx
mov	dword ptr [i], eax
                                                                                                                           
; ua = (ub / uc + 43 * 8) + ua / uc;
mov	eax, dword ptr [ub]
xor	edx, edx
div	dword ptr [uc]
mov	ecx, 43
shl	ecx, 3
add	eax, ecx
mov	ecx, eax
mov	eax, dword ptr [ua]
xor	edx, edx
div	dword ptr [uc]
add	ecx, eax
mov	dword ptr [ua], ecx
                                                                                                                                                                                             
; i = ((3 * a + b * c) + (a >= b)) + 34 % c;
mov	eax, dword ptr [b]
imul	eax, dword ptr [c]
imul	ecx, dword ptr [a], 3
add	eax, ecx
mov	ecx, dword ptr [a]
xor	ebx, ebx
cmp	ecx, dword ptr [b]
setge	bl
add	eax, ebx
mov	ecx, eax
mov	eax, 34
cdq
idiv	dword ptr [c]
add	ecx, edx
mov	dword ptr [i], ecx
                                                                            
; c3 = cast< char >( (a == d) % 3 == 1 );
mov	eax, dword ptr [a]
xor	ecx, ecx
cmp	eax, dword ptr [d]
sete	cl
mov	eax, ecx
mov	ecx, 3
cdq
idiv	ecx
xor	eax, eax
cmp	edx, 1
sete	al
mov	byte ptr [c3], al
                                                               
; i = (a == d) * 7 == 1;
mov	eax, dword ptr [a]
xor	ecx, ecx
cmp	eax, dword ptr [d]
sete	cl
imul	eax, ecx, 7
xor	ecx, ecx
cmp	eax, 1
sete	cl
mov	dword ptr [i], ecx
                                                               
; i = (a < d) * 7 > 1;
mov	eax, dword ptr [a]
xor	ecx, ecx
cmp	eax, dword ptr [d]
setl	cl
imul	eax, ecx, 7
xor	ecx, ecx
cmp	eax, 1
setg	cl
mov	dword ptr [i], ecx
                                                                                                                                                                                                                                                                                                                                          
; i = (~(a)) | (b * 4) % d << (l % p + (31 * c) * 88) - (!(a)) < (0 + 11) + k;
mov	eax, dword ptr [l]
cdq
idiv	dword ptr [p]
imul	eax, dword ptr [c], 31
imul	ecx, eax, 88
add	edx, ecx
xor	eax, eax
cmp	dword ptr [a], 0
sete	al
sub	edx, eax
mov	ecx, edx
mov	eax, dword ptr [b]
shl	eax, 2
cdq
idiv	dword ptr [d]
shl	edx, cl
mov	eax, dword ptr [k]
xor	ecx, ecx
lea	esi, [ecx + eax + 11]
xor	eax, eax
cmp	edx, esi
setl	al
mov	ecx, dword ptr [a]
not	ecx
or	eax, ecx
mov	dword ptr [i], eax
 
; return 0;
xor	eax, eax
L17:
pop	edi
pop	esi
pop	ebx
mov	esp, ebp
pop	ebp
ret	0
_main	endp

_TEXT ends
END